char operation
# Get the ASCII number of a character
number = ord(char)
# Get the character given by an ASCII number
char = chr(number)

iteration

for x,y in enumerate(list):

string 0peration

string to num  int() float() eval()
num to string  str()
list to string  "".join(['a','b'])
string to list  "a b c".split(" ")
str.find(substr, beg=0, end=len(string)) return the starting index of found substr in str, -1 if not found

(  ) tuple
{ }  set or dictionary set(), dict(tuple)
[ ]  list

set operation
set(list)
<set>.add()
<set>.clear()
<set1> - <set1>.intersection(<set2>) == <set1>.difference(<set2>)
<set1>.union(<set2>)
& intersection
| union
- difference
<set>.discard() #remove() will thorw exception when value doesn't exit but discard() won't

list operation

<seq> + <seq> Concatenation
<seq> * <int-expr> Repetition
<seq>[ ] Indexing
len(<seq>) Length
<seq>[ : ] Slicing
for <var> in <seq>: Iteration
<expr> in <seq> Membership check (Returns a Boolean)

del mylist[1:3]

Method
<list>.append(x) Add element x to end of list.
<list>.sort() Sort (order) the list. A comparison function may be passed as parameter.  (say data_list.sort(key=lambda obj:obj.get('softname'), reverse=True)  )
<list>.reverse() Reverse the list.
<list>.index(x) Returns index of first occurrence of x.
<list>.insert(i,x) Insert x into list at index i.
<list>.count(x) Returns the number of occurrences of x in list.
<list>.remove(x) Deletes the first occurrence of x in list.
<list>.pop(i) Deletes the ith element of the list and returns its value.

dictionary operation

Method
<key> in <dict> Returns true if dictionary contains the specified key, false if it doesnâ€™t.
<dict>.keys() Returns a sequence keys.
<dict>.values() Returns a sequence of values.
<dict>.items() Returns a sequence of tuples (key,value) representing the key-value pairs.
<dict>.get(<key>, <default>)  If dictionary has key returns its value otherwise returns default.
del <dict>[<key>]  Deletes the specified entry.
<dict>.clear() Deletes all entries.
for <var> in <dict>: Loop over the keys.
(default value set to be 0, neccessary when you count frequency:http://www.cnblogs.com/duyang/p/5065418.html?utm_source=tuicool&utm_medium=referral)
from collections import defaultdict
dic = defaultdict(int)

2.x
sorted(dict.items(), lambda x, y: cmp(x[1], y[1]), reverse=True) sort by value.
3.x
sorted(dict.items(), key = lambda x : x[1], reverse=True) sort by value.

map and reduce
map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])
import functools
functools.reduce(lambda x, y: x + y, [2, 4, 6, 8, 10])

all and any
any(iterable) -> bool
    Return True if bool(x) is True for any x in the iterable.
    If the iterable is empty, return False.
all(iterable) -> bool
    Return True if bool(x) is True for all values x in the iterable.
    If the iterable is empty, return True.
    
    
a input process:
age = input("in put formate like:12 13 15 15\n")
list(map(lambda x : int(x),age.split(" ")))

zip operation:
a=[[1,2,3],[4,5,6]]
list(zip(*a)) [(1, 4), (2, 5), (3, 6)]
list(zip(*zip(*a))) [(1, 2, 3), (4, 5, 6)]
a,b = [1,2,3],[4,5,6]
list(zip(a,b)) [(1, 4), (2, 5), (3, 6)]



ffile operation

input = open('data', 'r')
input = open('data', 'rb')

#Method 1
file_object = open('thefile.txt')
try:
     all_the_text = file_object.read( )
finally:
     file_object.close( )

#Method 2
file_object = open('abinfile', 'rb')
try:
    while True:
         chunk = file_object.read(100)
        if not chunk:
            break
         do_something_with(chunk)
finally:
     file_object.close( )

#Method 3
for EachLine in file_object:
    print EachLine

output = open('data', 'w')
output = open('data', 'wb')
output = open('data', 'w+')
file_object = open('thefile.txt', 'w')
file_object.write(all_the_text)
file_object.close( )

multiple lines
file_object.writelines(list_of_text_strings)












